{"version":3,"sources":["choice.js"],"names":[],"mappings":";;AAAA,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAE1B,IAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAChC,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAEjC,QAAQ,CAAC,QAAQ,EAAE,YAAM;;AAEzB,MAAE,CAAC,wCAAwC,EAAE,YAAM;AAC/C,YAAM,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,YAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACxB,cAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;AAChC,cAAM,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACjC,CAAC,CAAC;;AAEH,MAAE,CAAC,qCAAqC,EAAE,YAAM;AAC5C,YAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C;AACI,gBAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE;uBAAM,IAAI;aAAA,CAAC,CAAC,CAAC;AACpD,kBAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;AAChC,kBAAM,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACjC;AACD;AACI,gBAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE;uBAAM,IAAI;aAAA,CAAC,CAAC,CAAC;AACpD,kBAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;AAChC,kBAAM,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACjC;KACJ,CAAC,CAAC;;AAGH,MAAE,CAAC,qCAAqC,EAAE,YAAM;AAC5C,YAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;AAErE,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAC1B;AACI,gBAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE;uBAAM,CAAC,GAAG,IAAI;aAAA,CAAC,CAAC,CAAC;AACxD,kBAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;AAChC,kBAAM,CAAC,WAAW,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACpC;KACJ,CAAC,CAAC;CAEF,CAAC,CAAC","file":"choice.js","sourcesContent":["require(\"babel-polyfill\");\n\nconst gen = require('../index');\nconst assert = require('assert');\n\ndescribe('choice', () => {\n\nit('Single input always returns that value', () => {\n    const p = gen.exec(gen.choice(gen.str(4)));\n    const n = Array.from(p);\n    assert.strictEqual(1, n.length);\n    assert.strictEqual('4', n[0]);\n});\n\nit('Multiple choice is split around 0.5', () => {\n    const p = gen.choice(gen.str(1), gen.str(2));\n    {\n        const n = Array.from(gen.exec(p, null, () => 0.49));\n        assert.strictEqual(1, n.length);\n        assert.strictEqual('1', n[0]);\n    }    \n    {\n        const n = Array.from(gen.exec(p, null, () => 0.51));\n        assert.strictEqual(1, n.length);\n        assert.strictEqual('2', n[0]);\n    }\n});\n\n\nit('Many choices have equal probability', () => {\n    const p = gen.choice(gen.str(0), gen.str(1), gen.str(2), gen.str(3));\n    \n    for (var i = 0; i < 4; ++i)\n    {\n        const n = Array.from(gen.exec(p, null, () => i * 0.25));\n        assert.strictEqual(1, n.length);\n        assert.strictEqual('' + i, n[0]);\n    }    \n});\n\n});"],"sourceRoot":"/source/"}