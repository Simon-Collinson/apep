{"version":3,"sources":["seq.js"],"names":[],"mappings":";;AAAA,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAE1B,IAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAChC,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAEjC,QAAQ,CAAC,KAAK,EAAE,YAAM;;AAEtB,MAAE,CAAC,+CAA+C,EAAE,YAAM;AACtD,YAAM,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,YAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACxB,cAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;AAChC,cAAM,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACjC,CAAC,CAAC;;AAEH,MAAE,CAAC,kDAAkD,EAAE,YAAM;AACzD,YAAM,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,YAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACvB,cAAM,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;KACxC,CAAC,CAAC;;AAGH,MAAE,CAAC,+CAA+C,EAAE,YAAM;AACtD,YAAM,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;AAC7C,YAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AACvB,cAAM,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;KAC9C,CAAC,CAAC;CAEF,CAAC,CAAC","file":"seq.js","sourcesContent":["require(\"babel-polyfill\");\n\nconst gen = require('../index');\nconst assert = require('assert');\n\ndescribe('seq', () => {\n\nit('Should output single value with one parameter', () => {\n    const p = gen.exec(gen.seq(gen.str(4)));\n    const n = Array.from(p);\n    assert.strictEqual(1, n.length);\n    assert.strictEqual('4', n[0]);\n});\n\nit('Should yield all values with multiple parameters', () => {\n    const p = gen.exec(gen.seq(gen.str(1), gen.str(2), gen.str(3)));\n    const n = Array.from(p)\n    assert.deepEqual(['1', '2', '3'], n);\n});\n\n\nit('Should wrap no function parameters as strings', () => {\n    const p = gen.exec(gen.seq(1, \"abc\", false));\n    const n = Array.from(p)\n    assert.deepEqual(['1', 'abc', 'false'], n);\n});\n\n});"],"sourceRoot":"/source/"}