{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n    APEN\n    \n    Dada engine inspired library.\n*/\nrequire(\"babel-polyfill\");\nconst walker = require('walker-sample');\n\nconst arrayMap = Function.prototype.call.bind(Array.prototype.map);\n\n\n/**\n    Pac\n*/\nconst Pair = (x, s) => ({\n    'x': x,\n    's': s\n});\n\n/**\n*/\nconst Generador = function(run) {\n    this.run = run;\n};\n\n/**\n    Internal state object.\n*/\nconst State = (random, vars, ud) => ({\n    'random': random,\n    'vars': vars,\n    'ud': ud\n});\n\nState.empty = State(Math.random, {}, null);\n\nState.setUd = (s, ud) =>\n    State(s.random, s.vars, ud);\n\nState.setVars = (s, vars) =>\n    State(s.random, vars, s.ud);\n\nState.setRandom = (s, random) =>\n    State(random, s.vars, s.ud);\n\nState.getVar = (s, name, def) =>\n    s.vars.hasOwnProperty(name)\n        ? s.vars[name]\n        : def;\n\nState.setVar = (s, name, value) => {\n    const newVars = Object.create(s.vars);\n    newVars[name] = value;\n    return State.setVars(s, newVars);\n};\n\n/**\n    Run a given generator.\n*/\nexport const execute = (p, s) => {\n    return p.run(s);\n};\n\n/**\n    Declare a generator for self reference or late bindings.\n        \n    @param def Function that takes a reference to generator being defined and\n        returns the generator's definition.\n        \n    Anonymous self reference:\n    \n        gen.declare((self) =>\n            gen.seq(m, self));\n            \n    Use of forward declarations:\n    \n        // Use `m` before it is declared or defined.\n        const ms = gen.declare(() =>\n            gen.seq(m, self));\n            \n        const m = gen.lit('n');\n    \n    Later declaration: \n    \n        // Declare that the some generator `ms` will exist.\n        let ms = gen.declare(() => ms);\n        \n        // Use `ms` in any expression.\n        const p = gen.seq('a', ms);\n        \n        ...\n        \n        // Actually define `ms` sometime later.\n        ms = gen.str('abc');\n\n    Also can be used to introduce simple, scoped state:\n        \n        const counter = gen.declare(() => {\n            // declare some variables local to this block.\n            let sum = 0;\n\n            return gen.seq(\n                gen.seq(gen.str(1), gen.str(2), gen.str(3))\n                    .map(x => {\n                        // Update the state in an expression.\n                        sum += i;\n                        return x;\n                    }),\n                // and use the state sometime later.\n                // Declare is used to make sure the current value of `i` is\n                // always returned.\n                gen.declare(() => gen.lit(i)));\n        });\n            \n    For performance reasons, use declare around the smallest possible generator\n    since declare evaluates it's body every time the generator is invoked. \n*/\nexport const declare = (def) => {\n    let self;\n    return self = new Generador(s =>\n        execute(def(self), s));\n};\n\nconst Yield = (first, rest) => ({\n    first: first,\n    rest: rest,\n    '_yield': true\n});\n\nconst Done = (first) => ({\n    'first': first,\n    'rest': null,\n    '_yield': true\n});\n\n/**\n    Generate a literal value without any transformations applied.\n*/\nexport const lit = (x) =>\n    new Generador((s) =>\n        Yield(Pair(x, s), _ => Done(s)))\n \n/**\n    Empty value generator.\n*/\nexport const empty = new Generador(Done);\n\n/**\n    Generate a literal string value.\n    \n    Attempts to convert the input value to a string.\n*/\nexport const str = function(x) {\n    return arguments.length === 0 ? lit('') : lit('' +  x);\n};\n\n/**\n    Ensure value is inside a generator.\n    \n    Convert any literals into string literals.\n*/\nexport const wrap = (x) =>\n    x instanceof Generador ? x : str(x);\n\n/**\n    Run `a` and then `run b`.\n*/\nexport const next = (a, b) => {\n    a = wrap(a);\n    b = wrap(b);\n    const loop = (r) => {\n        if (r && r.rest)\n            return Yield(r.first, () => loop(r.rest()));\n        return execute(b, r.first);\n    };\n\n    return new Generador(s =>\n        loop(execute(a, s)));\n};\n\n/**\n    Run a sequence of generators left to right.\n    \n    Literal values are wrapped and converted to strings:\n    \n        gen.seq('a', g1, 3) === gen.seq(gen.str('a'), g1, gen.str(3))\n*/\nexport const seq = (...elements) =>\n    elements.reduceRight((p, c) => next(c, p));\n\n/**\n    Map function `f` over each element produced by `p`.\n*/\nexport const map = (p, f) =>\n    new Generador(s =>\n        (function loop(r) {\n            if (r && r.rest)\n                return Yield(\n                    Pair(f(r.first.x), r.first.s),\n                    () => loop(r.rest()));\n            return r;\n        })(execute(p, s)));\n        \n/* Choice\n ******************************************************************************/\n/**\n    Choose from along one or more generators, each with its own custom weight.\n*/\nexport const weightedChoice = (weightMap) => {\n    const table = walker(arrayMap(weightMap, x => [x[0], wrap(x[1])]));\n    return new Generador(s =>\n        execute(table(s.random), s));\n}; \n\n/**\n     Choose from along one or more generators.\n     \n     Each element has the same weight.\n     \n     @param elements Array of elements\n*/\nexport const choicea = (elements) =>\n    weightedChoice(arrayMap(elements, x => [1, x]));\n\n/**\n     Choose from along one or more generators taken as arguments.\n     \n     @see choicea\n*/\nexport const choice = (...elements) =>\n    choicea(elements);\n\n/**\n    Generator that optionally produces a value.\n*/\nexport const opt = choice.bind(null, empty);\n\n/* Iteration\n ******************************************************************************/\n\n/**\n    Run a generator zero or more times.\n\n    @param g Generator\n    @param prob At each step, what is the probability that `g` is run.\n        1 means that `g` is run infinity, while 0 means that `g` is never run.\n*/\nexport const many = (g, prob = 0.5) => {\n    if (prob > 1 || prob < 0) {\n        throw {\n            'name': \"ManyRangeError\",\n            'message': \"Probability must be between [0, 1]\"\n        };\n    }\n    if (prob === 0)\n        return empty;\n    else if (prob === 1) {\n        let self;\n        return self = seq(g, declare(() => self));\n    }\n    let self;\n    return self = weightedChoice([\n        [prob, seq(g, declare(() => self))],\n        [1 - prob, empty]]);\n};\n\n/**\n    Run a generator 1 or more times.\n    \n    @see many\n*/\nexport const many1 = (g, prob = 0.5) =>\n    seq(g, many(g, prob));\n\n/* Execution\n ******************************************************************************/\n/**\n    Begin the execution of a generator.\n    \n    @param g Generator.\n    @param ud Optional user data threaded through the generator's states.\n    @param r Random number generator.\n*/\nexport const exec = function*(g, ud, random = Math.random) {\n    var state = State.setRandom(State.setUd(State.empty, ud), random);\n    let r = execute(g, state, (x, s) => (x));    \n    while (true) { \n        if (!r._yield || !r.rest)\n            return;\n        yield r.first.x;\n        r = r.rest();\n    }\n};\n\n/**\n    Left fold over a generator.\n    \n    @param f Function taking accumulated value and current value.\n    @param z Initial value.\n    @param g Generator.\n    @param ud Optional user data threaded through the generator's states.\n    @param r Random number generator.\n*/\nexport const fold = (f, z, g, ud, random = Math.random) => {\n    for (const x of exec(g, ud, random))\n        z = f(z, x);\n    return z;\n};\n\n/**\n    Run a generator to completion, combining results into a string.\n    \n    @see exec\n*/\nexport const run = fold.bind(null, (p, c) => p + c, '');"],"sourceRoot":"/source/"}